{"ast":null,"code":"import axios from 'axios';\n// import jwtDecode from 'jwt-decode';\n// ES 모듈 대신 CommonJS require 사용\nconst jwtDecode = require('jwt-decode');\nconst api = axios.create({\n  baseURL: 'http://localhost:8080',\n  withCredentials: true // HttpOnly 쿠키 자동 포함\n});\n\n// 메모리 변수로만 보관\nlet accessToken = null;\n\n// 1) 토큰이 있으면 헤더에 설정\nexport function setAuthHeader(token) {\n  accessToken = token;\n  if (token) {\n    api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  } else {\n    delete api.defaults.headers.common['Authorization'];\n  }\n}\n\n// 2) 로그인 시 호출 (기존)\nexport async function login(username, password) {\n  const params = new URLSearchParams({\n    username,\n    password\n  });\n  const res = await api.post('/login', params);\n  const token = res.headers['authorization']?.split(' ')[1];\n  if (!token) throw new Error('No access token');\n  setAuthHeader(token);\n}\n\n// 3) 초기화용: 페이지 로드 시 자동으로 호출\nexport async function refreshAccessToken() {\n  try {\n    const res = await api.post('/refresh');\n    const token = res.headers['authorization']?.split(' ')[1];\n    if (token) {\n      setAuthHeader(token);\n    }\n  } catch (e) {\n    // Refresh 실패(쿠키 만료 등) 시에는\n    setAuthHeader(null);\n  }\n}\nexport async function signup(username, password) {\n  await api.put('/join', {\n    username,\n    password\n  });\n}\nexport function logout() {\n  localStorage.removeItem('accessToken');\n  delete api.defaults.headers.common['Authorization'];\n}\n\n// 4) 로그인 상태 확인\nexport function isLoggedIn() {\n  return !!accessToken;\n}\n\n// 5) Username 추출\nexport function getUsername() {\n  if (!accessToken) return null;\n  const {\n    username\n  } = jwtDecode(accessToken);\n  return username;\n}\nexport default api;","map":{"version":3,"names":["axios","jwtDecode","require","api","create","baseURL","withCredentials","accessToken","setAuthHeader","token","defaults","headers","common","login","username","password","params","URLSearchParams","res","post","split","Error","refreshAccessToken","e","signup","put","logout","localStorage","removeItem","isLoggedIn","getUsername"],"sources":["/Users/idoyun/Ssafy/SpringJWT_front/springjwt_vue/src/services/auth.js"],"sourcesContent":["import axios from 'axios';\n// import jwtDecode from 'jwt-decode';\n// ES 모듈 대신 CommonJS require 사용\nconst jwtDecode = require('jwt-decode');\n\nconst api = axios.create({\n  baseURL: 'http://localhost:8080',\n  withCredentials: true,   // HttpOnly 쿠키 자동 포함\n});\n\n// 메모리 변수로만 보관\nlet accessToken = null;\n\n// 1) 토큰이 있으면 헤더에 설정\nexport function setAuthHeader(token) {\n  accessToken = token;\n  if (token) {\n    api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  } else {\n    delete api.defaults.headers.common['Authorization'];\n  }\n}\n\n// 2) 로그인 시 호출 (기존)\nexport async function login(username, password) {\n  const params = new URLSearchParams({ username, password });\n  const res = await api.post('/login', params);\n  const token = res.headers['authorization']?.split(' ')[1];\n  if (!token) throw new Error('No access token');\n  setAuthHeader(token);\n}\n\n// 3) 초기화용: 페이지 로드 시 자동으로 호출\nexport async function refreshAccessToken() {\n  try {\n    const res = await api.post('/refresh');\n    const token = res.headers['authorization']?.split(' ')[1];\n    if (token) {\n      setAuthHeader(token);\n    }\n  } catch (e) {\n    // Refresh 실패(쿠키 만료 등) 시에는\n    setAuthHeader(null);\n  }\n}\n\nexport async function signup(username, password) {\n  await api.put('/join', { username, password });\n}\n\nexport function logout() {\n  localStorage.removeItem('accessToken');\n  delete api.defaults.headers.common['Authorization'];\n}\n\n// 4) 로그인 상태 확인\nexport function isLoggedIn() {\n  return !!accessToken;\n}\n\n// 5) Username 추출\nexport function getUsername() {\n  if (!accessToken) return null;\n  const { username } = jwtDecode(accessToken);\n  return username;\n}\n\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB;AACA;AACA,MAAMC,SAAS,GAAGC,OAAO,CAAC,YAAY,CAAC;AAEvC,MAAMC,GAAG,GAAGH,KAAK,CAACI,MAAM,CAAC;EACvBC,OAAO,EAAE,uBAAuB;EAChCC,eAAe,EAAE,IAAI,CAAI;AAC3B,CAAC,CAAC;;AAEF;AACA,IAAIC,WAAW,GAAG,IAAI;;AAEtB;AACA,OAAO,SAASC,aAAaA,CAACC,KAAK,EAAE;EACnCF,WAAW,GAAGE,KAAK;EACnB,IAAIA,KAAK,EAAE;IACTN,GAAG,CAACO,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUH,KAAK,EAAE;EAClE,CAAC,MAAM;IACL,OAAON,GAAG,CAACO,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC;EACrD;AACF;;AAEA;AACA,OAAO,eAAeC,KAAKA,CAACC,QAAQ,EAAEC,QAAQ,EAAE;EAC9C,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAAC;IAAEH,QAAQ;IAAEC;EAAS,CAAC,CAAC;EAC1D,MAAMG,GAAG,GAAG,MAAMf,GAAG,CAACgB,IAAI,CAAC,QAAQ,EAAEH,MAAM,CAAC;EAC5C,MAAMP,KAAK,GAAGS,GAAG,CAACP,OAAO,CAAC,eAAe,CAAC,EAAES,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EACzD,IAAI,CAACX,KAAK,EAAE,MAAM,IAAIY,KAAK,CAAC,iBAAiB,CAAC;EAC9Cb,aAAa,CAACC,KAAK,CAAC;AACtB;;AAEA;AACA,OAAO,eAAea,kBAAkBA,CAAA,EAAG;EACzC,IAAI;IACF,MAAMJ,GAAG,GAAG,MAAMf,GAAG,CAACgB,IAAI,CAAC,UAAU,CAAC;IACtC,MAAMV,KAAK,GAAGS,GAAG,CAACP,OAAO,CAAC,eAAe,CAAC,EAAES,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACzD,IAAIX,KAAK,EAAE;MACTD,aAAa,CAACC,KAAK,CAAC;IACtB;EACF,CAAC,CAAC,OAAOc,CAAC,EAAE;IACV;IACAf,aAAa,CAAC,IAAI,CAAC;EACrB;AACF;AAEA,OAAO,eAAegB,MAAMA,CAACV,QAAQ,EAAEC,QAAQ,EAAE;EAC/C,MAAMZ,GAAG,CAACsB,GAAG,CAAC,OAAO,EAAE;IAAEX,QAAQ;IAAEC;EAAS,CAAC,CAAC;AAChD;AAEA,OAAO,SAASW,MAAMA,CAAA,EAAG;EACvBC,YAAY,CAACC,UAAU,CAAC,aAAa,CAAC;EACtC,OAAOzB,GAAG,CAACO,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC;AACrD;;AAEA;AACA,OAAO,SAASiB,UAAUA,CAAA,EAAG;EAC3B,OAAO,CAAC,CAACtB,WAAW;AACtB;;AAEA;AACA,OAAO,SAASuB,WAAWA,CAAA,EAAG;EAC5B,IAAI,CAACvB,WAAW,EAAE,OAAO,IAAI;EAC7B,MAAM;IAAEO;EAAS,CAAC,GAAGb,SAAS,CAACM,WAAW,CAAC;EAC3C,OAAOO,QAAQ;AACjB;AAEA,eAAeX,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}