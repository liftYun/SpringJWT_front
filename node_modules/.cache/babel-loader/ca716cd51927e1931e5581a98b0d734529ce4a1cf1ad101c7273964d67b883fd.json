{"ast":null,"code":"import axios from 'axios';\nimport jwtDecode from 'jwt-decode';\nconst api = axios.create({\n  baseURL: 'http://localhost:8080',\n  withCredentials: true // HttpOnly 쿠키 자동 포함\n});\n\n// 메모리 변수로만 보관\nlet accessToken = null;\n\n// 1) 토큰이 있으면 헤더에 설정\nexport function setAuthHeader(token) {\n  accessToken = token;\n  if (token) {\n    api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  } else {\n    delete api.defaults.headers.common['Authorization'];\n  }\n}\nexport async function login(username, password) {\n  const params = new URLSearchParams();\n  params.append('username', username);\n  params.append('password', password);\n  const res = await api.post('/login', params);\n  const token = res.headers['authorization']?.split(' ')[1];\n  console.log('로그인 토큰:', token);\n  if (!token) throw new Error('No access token');\n  localStorage.setItem('accessToken', token);\n  setAuthHeader();\n}\nexport async function signup(username, password) {\n  await api.put('/join', {\n    username,\n    password\n  });\n}\nexport function logout() {\n  localStorage.removeItem('accessToken');\n  delete api.defaults.headers.common['Authorization'];\n}\nexport function isLoggedIn() {\n  return !!localStorage.getItem('accessToken');\n}\nexport function getUsername() {\n  try {\n    const token = localStorage.getItem('accessToken');\n    if (!token) return null;\n    const {\n      username\n    } = jwtDecode(token);\n    return username;\n  } catch {\n    return null;\n  }\n}\nexport default api;","map":{"version":3,"names":["axios","jwtDecode","api","create","baseURL","withCredentials","accessToken","setAuthHeader","token","defaults","headers","common","login","username","password","params","URLSearchParams","append","res","post","split","console","log","Error","localStorage","setItem","signup","put","logout","removeItem","isLoggedIn","getItem","getUsername"],"sources":["/Users/idoyun/Ssafy/SpringJWT_front/springjwt_vue/src/services/auth.js"],"sourcesContent":["import axios from 'axios';\nimport jwtDecode from 'jwt-decode';\n\nconst api = axios.create({\n  baseURL: 'http://localhost:8080',\n  withCredentials: true,   // HttpOnly 쿠키 자동 포함\n});\n\n// 메모리 변수로만 보관\nlet accessToken = null;\n\n// 1) 토큰이 있으면 헤더에 설정\nexport function setAuthHeader(token) {\n  accessToken = token;\n  if (token) {\n    api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  } else {\n    delete api.defaults.headers.common['Authorization'];\n  }\n}\n\nexport async function login(username, password) {\n  const params = new URLSearchParams();\n  params.append('username', username);\n  params.append('password', password);\n\n  const res = await api.post('/login', params);\n  const token = res.headers['authorization']?.split(' ')[1];\n\n  console.log('로그인 토큰:', token);\n\n  if (!token) throw new Error('No access token');\n\n  localStorage.setItem('accessToken', token);\n  setAuthHeader();\n}\n\nexport async function signup(username, password) {\n  await api.put('/join', { username, password });\n}\n\nexport function logout() {\n  localStorage.removeItem('accessToken');\n  delete api.defaults.headers.common['Authorization'];\n}\n\nexport function isLoggedIn() {\n  return !!localStorage.getItem('accessToken');\n}\n\nexport function getUsername() {\n  try {\n    const token = localStorage.getItem('accessToken');\n    if (!token) return null;\n    const { username } = jwtDecode(token);\n    return username;\n  } catch {\n    return null;\n  }\n}\n\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAElC,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAE,uBAAuB;EAChCC,eAAe,EAAE,IAAI,CAAI;AAC3B,CAAC,CAAC;;AAEF;AACA,IAAIC,WAAW,GAAG,IAAI;;AAEtB;AACA,OAAO,SAASC,aAAaA,CAACC,KAAK,EAAE;EACnCF,WAAW,GAAGE,KAAK;EACnB,IAAIA,KAAK,EAAE;IACTN,GAAG,CAACO,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUH,KAAK,EAAE;EAClE,CAAC,MAAM;IACL,OAAON,GAAG,CAACO,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC;EACrD;AACF;AAEA,OAAO,eAAeC,KAAKA,CAACC,QAAQ,EAAEC,QAAQ,EAAE;EAC9C,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;EACpCD,MAAM,CAACE,MAAM,CAAC,UAAU,EAAEJ,QAAQ,CAAC;EACnCE,MAAM,CAACE,MAAM,CAAC,UAAU,EAAEH,QAAQ,CAAC;EAEnC,MAAMI,GAAG,GAAG,MAAMhB,GAAG,CAACiB,IAAI,CAAC,QAAQ,EAAEJ,MAAM,CAAC;EAC5C,MAAMP,KAAK,GAAGU,GAAG,CAACR,OAAO,CAAC,eAAe,CAAC,EAAEU,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAEzDC,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEd,KAAK,CAAC;EAE7B,IAAI,CAACA,KAAK,EAAE,MAAM,IAAIe,KAAK,CAAC,iBAAiB,CAAC;EAE9CC,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEjB,KAAK,CAAC;EAC1CD,aAAa,CAAC,CAAC;AACjB;AAEA,OAAO,eAAemB,MAAMA,CAACb,QAAQ,EAAEC,QAAQ,EAAE;EAC/C,MAAMZ,GAAG,CAACyB,GAAG,CAAC,OAAO,EAAE;IAAEd,QAAQ;IAAEC;EAAS,CAAC,CAAC;AAChD;AAEA,OAAO,SAASc,MAAMA,CAAA,EAAG;EACvBJ,YAAY,CAACK,UAAU,CAAC,aAAa,CAAC;EACtC,OAAO3B,GAAG,CAACO,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC;AACrD;AAEA,OAAO,SAASmB,UAAUA,CAAA,EAAG;EAC3B,OAAO,CAAC,CAACN,YAAY,CAACO,OAAO,CAAC,aAAa,CAAC;AAC9C;AAEA,OAAO,SAASC,WAAWA,CAAA,EAAG;EAC5B,IAAI;IACF,MAAMxB,KAAK,GAAGgB,YAAY,CAACO,OAAO,CAAC,aAAa,CAAC;IACjD,IAAI,CAACvB,KAAK,EAAE,OAAO,IAAI;IACvB,MAAM;MAAEK;IAAS,CAAC,GAAGZ,SAAS,CAACO,KAAK,CAAC;IACrC,OAAOK,QAAQ;EACjB,CAAC,CAAC,MAAM;IACN,OAAO,IAAI;EACb;AACF;AAEA,eAAeX,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}